<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "http://www.w3.org/Math/DTD/mathml2/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="viewport" content="width=1024" />
<link rel="stylesheet" type="text/css" href="texlike.css"/>
<link rel="stylesheet" type="text/css" href="sleef.css"/>
<title>SLEEF API Reference</title>
</head>
<body>
<h1>SLEEF API Reference - Additional Notes</h1>

<h2>Table of contents</h2>

<ul class="none" style="font-size:14pt; font-family: arial, sansserif; padding-left: 0.5cm;">
  <li><a href="index.xhtml">Introduction</a></li>
  <li><a href="purec.xhtml">Math library reference</a></li>
  <li><a href="dft.xhtml">DFT library reference</a></li>
  <li><a href="misc.xhtml">Other tools included in the package</a></li>
  <li><a href="funcindex.xhtml">Function index</a></li>
  <li><a href="benchmark.xhtml">Benchmark results</a></li>
  <li><a href="additional.xhtml">Additional notes</a></li>
</ul>

<h2 id="overview">Additional Notes</h2>

<h3>About ULP</h3>

<p class="description">
  ULP stands for "unit in the last place", which is sometimes used for
  measuring accuracy of calculations. 1 ULP is basically the distance
  between the two closest floating point number, which depends on the
  exponent of the FP number. The accuracy of calculations by reputable
  math libraries is usually between 0.5 and 1 ULP. Here, the accuracy
  means the largest error of calculation, which only happens in the
  worst case.
</p>

<p class="description">
  SLEEF math library provides multiple accuracy choices for some math
  functions. Many functions have 3.5-ULP and 1-ULP versions, and
  3.5-ULP versions are significantly faster than 1-ULP versions. If
  you care more about execution speed than accuracy, it is advised to
  use the 3.5-ULP versions along with -ffast-math or "unsafe math
  optimization" options for the compiler.
</p>

<h3>About sincospi</h3>

<p class="description">
  The sincospi series of functions evaluates <i class="math">sin(
    &pi;<i class="var">a</i> )</i> and <i class="math">cos(
    &pi;<i class="var">a</i> )</i> simultaneously. These functions
    are added to SLEEF as of version 3.0. Below, I explain the two
    reasons that I added these functions.
</p>

<p class="description">
  C standards include specifications for functions that evaluate
  trigonometric functions. In order to do calculations for evaluating
  these functions, reduction of an argument is required. This involves
  a multiple precision multiplication with <i class="math">&pi;</i>,
  which requires many operations of addition and multiplication. This
  is slow especially if accurate evaluation is required. By designing
  the function in a way that the argument is pre-multiplied
  by <i class="math">&pi;</i>, this reduction can be elminated. This
  leads to faster and more accurate evaluation.
</p>

<p class="description">
  The second reason is that sincospi functions are handy for
  implementing an FFT library. FFT libraries need to evaluate
  trigonometric functions for generating twiddle factors that is used in
  the butterfly operations. Since the butterfly operations are
  repeatedly applied, the error in twiddle factors accumulates. Thus, we
  want to make the error in twiddle factors as small as possible.  In an
  FFT of power-of-two size, twiddle factors are
  <i class="math">sin( &pi;<i class="var">m</i> /
    2<sup><i class="var">n</i></sup> )</i> where <i class="var">m</i>
    and <i class="var">n</i> are integer. If we just use the usual
    trigonometric functions defined in the C standards with the
    precision same as that used for butterfly operations, we already
    have error when calculating arguments, since
    &pi;<i class="var">m</i> / 2<sup><i class="var">n</i></sup> cannot
    be represented as a floating point value without error. On the
    other hand, if we use sincospi function, the argument can be
    accuratedly represented by a radix 2 FP number. Thus, we can
    calculate twiddle factors with better accuracy.
</p>

<h3>About the logo</h3>

<p class="description">
  It is a soup ladle.
</p>

<br/>

<a href="sleeflogo2.png"><img src="sleeflogo2.png" alt="logo" style="margin-left: 3.0cm; zoom: 40%;" /></a>

</body>
</html>
